diff --git a/preprocess/chirp_simulate.py b/preprocess/chirp_simulate.py
index d6e15d8..42ad7ed 100644
--- a/preprocess/chirp_simulate.py
+++ b/preprocess/chirp_simulate.py
@@ -56,8 +56,8 @@ def read_label():
     peak_position = np.array(peak_position)
     print(sim_chirp.shape, sim_chirp[0])
     print(peak_position.shape, peak_position[0])
-    # np.save(save_folder + str(n_label[1]) +'/simulate_radar_1chirp_500pad', sim_chirp[:,:,:100])
-    # np.save(save_folder + str(n_label[1]) +'/peak_position_1chirp_500pad', peak_position)
+    np.save(save_folder + str(n_label[1]) +'/simulate_radar_1chirp_0pad', sim_chirp)
+    np.save(save_folder + str(n_label[1]) +'/peak_position_1chirp_0pad', peak_position)
 
 def simulate(dis, sim_chirp, peak_position):
 
@@ -81,19 +81,22 @@ def simulate(dis, sim_chirp, peak_position):
     t = i / ADCSamples * ADCSamplingTime
     ls.append(np.exp(2 * np.pi * t * 1j * fbeat(obj_distance)))
 
-  n_pad = ((0,500))
+  n_pad = ((0,0))
   ls = np.pad(ls, pad_width=n_pad, mode='constant', constant_values=0)
   
-
-  for j in [1,5,10,15,20]:
-    fft = np.fft.fft(ls) / ADCSamples
-    fft = j*fft
-    fft_all.append(fft)
+  random_multiply_peak = np.random.randint(low=1, high=20, size=10)
+  print(random_multiply_peak)
+  for j in random_multiply_peak:
+    # print(j)
+    fft = np.fft.fft(ls)
+    fft_modulus = j*abs(fft / ADCSamples)
+    fft_all.append(fft_modulus)
   
   fft_all = np.array(fft_all)
-  fft_modulus = abs(fft_all[4])
+  # print(fft_all.shape)
   pos_peak = np.where(fft_modulus == np.max(fft_modulus))
   pos_peak = int(np.array(pos_peak[0]))
+  # print(pos_peak)
   # print(pos_peak-2)
   mean_clutter_F = np.mean(fft_modulus[:pos_peak-2])
   mean_clutter_R = np.mean(fft_modulus[pos_peak+2:])
@@ -102,11 +105,16 @@ def simulate(dis, sim_chirp, peak_position):
   # print(mean_clutter.shape)
   sim_chirp.append(fft_all)
   peak_position.append(pos_peak)
+  
   # plt.rcParams['figure.figsize'] = [20, 8]
   # plt.subplot(1, 2, 1)
   # plt.plot(np.real(ls))
   # plt.subplot(1, 2, 2)
-  # plt.plot(fft_modulus[:100])
+  # plt.plot(fft_all[0,:])
+  # plt.plot(fft_all[1,:])
+  # plt.plot(fft_all[2,:])
+  # plt.plot(fft_all[3,:])
+  # plt.plot(fft_all[4,:])
   # plt.plot(mean_clutter)
   # plt.show()
 
